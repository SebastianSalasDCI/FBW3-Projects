{"version":3,"sources":["Components/Navbar.js","Views/Home.js","Views/Group.js","Views/Main.js","App.js","serviceWorker.js","index.js"],"names":["NavbarComp","useState","collapseOpen","setCollapse","navbar_links","data","groups","map","group","key","name","className","activeClassName","style","textDecoration","to","link","type","theme","expand","onClick","open","navbar","Home","cards","xs","sm","md","lg","src","process","Group","props","groupinfo","filter","match","params","gname","console","log","members","member","listStyleType","email","class","linkedin","href","xing","github","images","pageImages","imgSrc","Main","path","component","exact","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc67e4b9.chunk.js","sourcesContent":["import {NavLink} from 'react-router-dom'\r\nimport React, {useState} from 'react'\r\nimport {\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    Collapse\r\n  } from \"shards-react\";\r\nimport data from '../data/data.json'\r\n\r\n\r\nexport default function NavbarComp() {\r\n\r\n    const [collapseOpen, setCollapse] = useState(false)\r\n\r\n    const toggleNavbar = () =>{\r\n        setCollapse(!collapseOpen)\r\n    }\r\n\r\n    let navbar_links = data.groups.map(group => {\r\n        return(\r\n            <NavItem key={group.name} className=\"navItem\">\r\n                <NavLink className=\"navlink\" \r\n                        activeClassName='linkActive' \r\n                        style={{ textDecoration: 'none' }}\r\n                        to={`/group/${group.link}`}>\r\n                    {group.name}\r\n                </NavLink>\r\n            </NavItem>\r\n        )\r\n    })\r\n\r\n    return (\r\n        \r\n    <Navbar type=\"dark\" theme=\"dark\" expand=\"md\">\r\n        <NavLink to=\"/\">\r\n            <NavbarBrand >FBW3 Projects</NavbarBrand>\r\n        </NavLink>\r\n        <NavbarToggler onClick={toggleNavbar} />\r\n\r\n        <Collapse open={collapseOpen} navbar>\r\n            <Nav navbar>\r\n                {navbar_links}\r\n            </Nav>\r\n        </Collapse>\r\n    </Navbar>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Container, Row, Col, Card, CardImg } from \"shards-react\";\r\nimport {Link} from 'react-router-dom'\r\nimport data from '../data/data.json'\r\n\r\nexport default function Home() {\r\n\r\n    let cards = data.groups.map(group =>{\r\n        return (\r\n            <Col key={group.name} xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\">\r\n                <Link style={{ textDecoration: 'none' }} to={`/group/${group.link}`} >\r\n                    <h4 className=\"projectTitle\"> {group.name} </h4>\r\n                    <Card className=\"cardClass\">\r\n                        <CardImg className=\"homeImg\" \r\n                        src={process.env.PUBLIC_URL +group[\"front-image\"]}/>\r\n                    </Card>\r\n                </Link>\r\n            </Col>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"titleCont\">\r\n            <h1>Welcome to FBW3 Projects</h1>\r\n            <h5>Here you will find a small description of the \r\n                projects presented to you on Thurday 2nd of July 2020</h5>\r\n            </div>\r\n            \r\n            <Container>\r\n                <Row>\r\n                    {cards}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport data from '../data/data.json'\r\nimport { \r\n    Container, \r\n    Row, \r\n    Col, \r\n    Card,\r\n    CardImg,\r\n    CardBody\r\n} from \"shards-react\";\r\n\r\nexport default function Group(props) {\r\n\r\n    let groupinfo = data.groups.filter(group =>{\r\n        if(group.link === props.match.params.gname){\r\n            return true\r\n        }else{\r\n            return false\r\n        }\r\n    })\r\n\r\n    console.log(groupinfo)\r\n\r\n    let members = groupinfo[0].members.map(member => {\r\n\r\n        return(\r\n                <Card key={member.name} className=\"cardClass\">\r\n                    <CardImg className=\"profImg\"\r\n                    src={process.env.PUBLIC_URL +member[\"profile-image\"]}/>\r\n                    <CardBody>\r\n                    <h5>{member.name}</h5>\r\n                    <ul style={{listStyleType: \"none\"}}>\r\n                        {member.email ? \r\n                        <li><i class=\"fas fa-envelope-square\"></i> {member.email}</li>\r\n                        : null}\r\n\r\n                        {member.linkedin ? \r\n                        <li><i class=\"fab fa-linkedin\"></i> <a href={member.linkedin}>Linkedin</a></li>\r\n                        : null}\r\n                        \r\n                        {member.xing ? <li><i class=\"fab fa-xing-square\"></i> <a href={member.xing}>Xing</a></li>\r\n                        :null}\r\n\r\n                        {member.github ? \r\n                        <li><i class=\"fab fa-github-square\"></i> <a href={member.github}>Github</a></li>\r\n                        : null}\r\n                    </ul>\r\n                        \r\n\r\n                    </CardBody>\r\n                </Card>\r\n                \r\n        )\r\n    })\r\n\r\n    let images = groupinfo[0].pageImages.map(imgSrc=>{\r\n        return (\r\n                <Card className=\"cardClass\">\r\n                    <CardImg className=\"homeImg\" \r\n                    src={process.env.PUBLIC_URL +imgSrc}/>\r\n                </Card>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"titleCont\">\r\n               <h1>{groupinfo[0].name}</h1> \r\n            </div>\r\n            \r\n            <Container>\r\n                <Row>\r\n                    <Col xs=\"12\" sm=\"12\" md=\"5\" lg=\"5\">\r\n                        <h4 className=\"titleSection\">Group members: </h4>\r\n                        {members}\r\n                    </Col>\r\n                    <Col xs=\"12\" sm=\"12\" md=\"7\" lg=\"7\">\r\n                        <h4 className=\"titleSection\" >Project images example: </h4>\r\n                        {images}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Switch, Route} from 'react-router-dom'\r\nimport Home from './Home'\r\nimport Group from './Group'\r\n\r\nexport default function Main() {\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <Switch>\r\n                <Route path={`/group/:gname`}  component={Group}/>\r\n                <Route exact path=\"/\" component={Home} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Main from './Views/Main'\nimport {BrowserRouter as Router} from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Navbar />\n        <Main />\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}